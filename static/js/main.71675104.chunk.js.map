{"version":3,"sources":["components/Button/Button.tsx","components/Board/context/BoardContext.tsx","components/Board/hooks/useBoard.ts","components/Board/models/Board.ts","components/Grid/Grid.tsx","components/Tile/Tile.tsx","hooks/usePrevProps.ts","components/Board/Board.tsx","components/Tile/models/Tile.ts","components/Game/hooks/useIds.ts","components/Game/hooks/useGame/reducer.ts","components/Game/hooks/useGame/useGame.ts","components/Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","children","onClick","className","BoardContext","React","createContext","containerWidth","tileCount","defaultTileCount","BoardProvider","Provider","value","useBoard","useContext","Grid","length","cells","index","push","renderGrid","Tile","position","zIndex","useState","scale","setScale","previousValue","ref","useRef","useEffect","current","usePrevProps","withinBoardBoundaries","invariant","shallHighlight","undefined","setTimeout","positionToPixels","style","top","left","transform","Board","tiles","tileCountPerRow","tileWidth","boardWidth","tileList","map","id","restProps","width","seqId","initialState","byIds","hasChanged","inMotion","GameReducer","state","action","type","tile","source","destination","restTiles","filter","useGame","isInitialRender","nextId","useReducer","dispatch","createTile","useCallback","throttledMergeTile","mergeTile","updateTile","retrieveTileMap","tileMap","Array","tileCountPerRowOrColumn","fill","forEach","positionToIndex","findEmptyTiles","reduce","result","tileId","indexToPosition","generateRandomTile","emptyTiles","Math","floor","random","move","retrieveTileIdsPerRowOrColumn","calculateFirstFreeIndex","maxIndex","rowOrColumnIndex","availableTileIds","previousTile","mergedTilesCount","nonEmptyTileIndex","currentTile","mergeWith","hasXChanged","hasYChanged","didTileMove","bind","rowIndex","tileIndex","tileInRowIndex","howManyMerges","_","reverse","maxIndexInRow","columnIndex","tileInColumnIndex","maxIndexInColumn","Game","moveLeft","moveRight","moveUp","moveDown","throttledHandleKeyDown","useThrottledCallback","e","preventDefault","code","leading","trailing","window","addEventListener","removeEventListener","App","Date","date","setDate","toISOString","href","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71675104.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./button.less\";\n\ntype Props = {\n  children: any;\n  onClick?: () => void;\n};\n\nexport const Button = ({ children, onClick }: Props) => {\n  return (\n    <button className=\"button\" onClick={onClick}>\n      {children}\n    </button>\n  );\n};\n","import React from \"react\";\nimport { tileCount as defaultTileCount } from \"../index\";\n\nexport const BoardContext = React.createContext({\n  containerWidth: 0,\n  tileCount: defaultTileCount,\n});\n\ntype Props = {\n  containerWidth: number;\n  tileCount: number;\n  children: any;\n};\n\nexport const BoardProvider = ({\n  children,\n  containerWidth = 0,\n  tileCount = defaultTileCount,\n}: Props) => {\n  return (\n    <BoardContext.Provider value={{ containerWidth, tileCount }}>\n      {children}\n    </BoardContext.Provider>\n  );\n};\n","import { useContext } from \"react\";\nimport { BoardContext } from \"../context/BoardContext\";\n\n/**\n * Returns the properties of the board such as tile container width or tile count.\n */\nexport const useBoard = () => {\n  const { containerWidth, tileCount } = useContext(BoardContext);\n\n  return [containerWidth, tileCount] as [number, number];\n};\n","import { pixelSize } from \"../../../styles\";\n\n/**\n * The number of tiles per row and column.\n * IMPORTANT! Check styles before changing this value!\n *\n * @constant {number}\n */\nexport const tileCount = 4;\n\n/**\n * The duration of every animation in ms.\n * IMPORTANT! Check styles before modyfing this value!\n *\n * @constant {number} ms\n */\nexport const animationDuration = 250;\n\n/**\n * The board margin (left, right, top, bottom).\n */\nexport const boardMargin = 2 * pixelSize;\n","import React from \"react\";\nimport { useBoard } from \"../Board\";\n\nimport \"./grid.less\";\n\nexport const Grid = () => {\n  const [, tileCount] = useBoard();\n\n  const renderGrid = () => {\n    const length = tileCount * tileCount;\n    const cells = [] as JSX.Element[];\n\n    for (let index = 0; index < length; index += 1) {\n      cells.push(<div key={`${index}`} className={`grid-cell`} />);\n    }\n\n    return cells;\n  };\n\n  return <div className=\"grid\">{renderGrid()}</div>;\n};\n","import React, { useEffect, useState } from \"react\";\nimport invariant from \"tiny-invariant\";\nimport { usePrevProps } from \"../../hooks/usePrevProps\";\nimport { useBoard } from \"../Board\";\nimport \"./tile.less\";\n\ntype Props = {\n  // tile value - 2, 4, 8, 16, 32, ..., 2048.∂\n  value: number;\n  // an array containing the x and y index on the board.\n  position: [number, number];\n  // the order of tile on the tile stack.\n  zIndex: number;\n};\n\nexport const Tile = ({ value, position, zIndex }: Props) => {\n  // retrieves board properties\n  const [containerWidth, tileCount] = useBoard();\n  //  state required to animate the highlight\n  const [scale, setScale] = useState(1);\n\n  // the previous value (prop) - it is undefined if it is a new tile.\n  const previousValue = usePrevProps<number>(value);\n\n  // check if tile is within the board boundries\n  const withinBoardBoundaries =\n    position[0] < tileCount && position[1] < tileCount;\n  invariant(withinBoardBoundaries, \"Tile out of bound\");\n\n  // if it is a new tile...\n  const isNew = previousValue === undefined;\n  // ...or its value has changed...\n  const hasChanged = previousValue !== value;\n  // ... then the tile should be highlighted.\n  const shallHighlight = isNew || hasChanged;\n\n  // useEffect will decide if highlight should be triggered.\n  useEffect(() => {\n    if (shallHighlight) {\n      setScale(1.1);\n      setTimeout(() => setScale(1), 100);\n    }\n  }, [shallHighlight, scale]);\n\n  /**\n   * Converts tile position from array index to pixels.\n   */\n  const positionToPixels = (position: number) => {\n    return (position / tileCount) * (containerWidth as number);\n  };\n\n  // all animations come from CSS transition, and we pass them as styles\n  const style = {\n    top: positionToPixels(position[1]),\n    left: positionToPixels(position[0]),\n    transform: `scale(${scale})`,\n    zIndex,\n  };\n\n  return (\n    <div className={`tile tile-${value}`} style={style}>\n      {value}\n    </div>\n  );\n};\n","import { useEffect, useRef } from \"react\";\n\n/**\n * `usePrevProps` stores the previous value of the prop.\n *\n * @link https://blog.logrocket.com/how-to-get-previous-props-state-with-react-hooks/\n * @param {K} value\n * @returns {K | undefined}\n */\nexport const usePrevProps = <K = any>(value: K) => {\n  const ref = useRef<K>();\n\n  useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref.current;\n};\n","import React from \"react\";\nimport { BoardProvider } from \"./context/BoardContext\";\nimport { boardMargin, tileCount as defaultTileCount } from \"./models/Board\";\nimport { Grid } from \"../Grid\";\nimport { TileMeta, tileTotalWidth, Tile } from \"../Tile\";\nimport \"./board.less\";\n\ntype Props = {\n  tiles: TileMeta[];\n  tileCountPerRow: number;\n};\n\nexport const Board = ({ tiles, tileCountPerRow = defaultTileCount }: Props) => {\n  // container width = tile width * tile count per row\n  const containerWidth = tileTotalWidth * tileCountPerRow;\n  // board width = container width + margin\n  const boardWidth = containerWidth + boardMargin;\n\n  // render all tiles on the board\n  const tileList = tiles.map(({ id, ...restProps }) => (\n    <Tile key={`tile-${id}`} {...restProps} zIndex={id} />\n  ));\n\n  return (\n    <div className=\"board\" style={{ width: boardWidth }}>\n      <BoardProvider\n        containerWidth={containerWidth}\n        tileCount={tileCountPerRow}\n      >\n        <div className=\"tile-container\">{tileList}</div>\n        <Grid />\n      </BoardProvider>\n    </div>\n  );\n};\n","import { pixelSize } from \"../../../styles\";\n\nexport type TileMeta = {\n  id: number;\n  position: [number, number];\n  value: number;\n  mergeWith?: number;\n};\n\nconst tileMargin = 2 * pixelSize;\n\nconst tileWidthMultiplier = 12.5;\n\nconst tileWidth = tileWidthMultiplier * pixelSize;\n\nexport const tileTotalWidth = tileWidth + tileMargin;\n","let seqId = 1;\n\n/**\n * Returns next sequential number.\n */\nexport const useIds = () => {\n  const nextId = () => {\n    return seqId++;\n  };\n\n  return [nextId];\n};\n","import { TileMeta } from \"../../../Tile\";\n\ntype State = {\n  tiles: {\n    [id: number]: TileMeta;\n  };\n  inMotion: boolean;\n  hasChanged: boolean;\n  byIds: number[];\n};\n\nexport const initialState: State = {\n  tiles: {},\n  byIds: [],\n  hasChanged: false,\n  inMotion: false,\n};\n\ntype Action =\n  | { type: \"CREATE_TILE\"; tile: TileMeta }\n  | { type: \"UPDATE_TILE\"; tile: TileMeta }\n  | { type: \"MERGE_TILE\"; source: TileMeta; destination: TileMeta }\n  | { type: \"START_MOVE\" }\n  | { type: \"END_MOVE\" };\n\nexport const GameReducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case \"CREATE_TILE\":\n      return {\n        ...state,\n        tiles: {\n          ...state.tiles,\n          [action.tile.id]: action.tile,\n        },\n        byIds: [...state.byIds, action.tile.id],\n        hasChanged: false,\n      };\n    case \"UPDATE_TILE\":\n      return {\n        ...state,\n        tiles: {\n          ...state.tiles,\n          [action.tile.id]: action.tile,\n        },\n        hasChanged: true,\n      };\n    case \"MERGE_TILE\":\n      const {\n        [action.source.id]: source,\n        [action.destination.id]: destination,\n        ...restTiles\n      } = state.tiles;\n      return {\n        ...state,\n        tiles: {\n          ...restTiles,\n          [action.destination.id]: {\n            id: action.destination.id,\n            value: action.source.value + action.destination.value,\n            position: action.destination.position,\n          },\n        },\n        byIds: state.byIds.filter((id) => id !== action.source.id),\n        hasChanged: true,\n      };\n    case \"START_MOVE\":\n      return {\n        ...state,\n        inMotion: true,\n      };\n    case \"END_MOVE\":\n      return {\n        ...state,\n        inMotion: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { useCallback, useEffect, useReducer, useRef } from \"react\";\nimport {\n  animationDuration,\n  tileCount as tileCountPerRowOrColumn,\n} from \"../../../Board\";\nimport { TileMeta } from \"../../../Tile\";\nimport { useIds } from \"../useIds\";\nimport { GameReducer, initialState } from \"./reducer\";\n\nexport const useGame = () => {\n  const isInitialRender = useRef(true);\n  const [nextId] = useIds();\n  // state\n  const [state, dispatch] = useReducer(GameReducer, initialState);\n  const { tiles, byIds, hasChanged, inMotion } = state;\n\n  const createTile = useCallback(\n    ({ position, value }: Partial<TileMeta>) => {\n      const tile = {\n        id: nextId(),\n        position,\n        value,\n      } as TileMeta;\n      dispatch({ type: \"CREATE_TILE\", tile });\n    },\n    [nextId]\n  );\n\n  const mergeTile = (source: TileMeta, destination: TileMeta) => {\n    dispatch({ type: \"MERGE_TILE\", source, destination });\n  };\n\n  // A must-have to keep the sliding animation if the action merges tiles together.\n  const throttledMergeTile = (source: TileMeta, destination: TileMeta) => {\n    setTimeout(() => mergeTile(source, destination), animationDuration);\n  };\n\n  const updateTile = (tile: TileMeta) => {\n    dispatch({ type: \"UPDATE_TILE\", tile });\n  };\n\n  const didTileMove = (source: TileMeta, destination: TileMeta) => {\n    const hasXChanged = source.position[0] !== destination.position[0];\n    const hasYChanged = source.position[1] !== destination.position[1];\n\n    return hasXChanged || hasYChanged;\n  };\n\n  const retrieveTileMap = useCallback(() => {\n    const tileMap = new Array(\n      tileCountPerRowOrColumn * tileCountPerRowOrColumn\n    ).fill(0) as number[];\n\n    byIds.forEach((id) => {\n      const { position } = tiles[id];\n      const index = positionToIndex(position);\n      tileMap[index] = id;\n    });\n\n    return tileMap;\n  }, [byIds, tiles]);\n\n  const findEmptyTiles = useCallback(() => {\n    const tileMap = retrieveTileMap();\n\n    const emptyTiles = tileMap.reduce((result, tileId, index) => {\n      if (tileId === 0) {\n        return [...result, indexToPosition(index) as [number, number]];\n      }\n\n      return result;\n    }, [] as [number, number][]);\n\n    return emptyTiles;\n  }, [retrieveTileMap]);\n\n  const generateRandomTile = useCallback(() => {\n    const emptyTiles = findEmptyTiles();\n\n    if (emptyTiles.length > 0) {\n      const index = Math.floor(Math.random() * emptyTiles.length);\n      const position = emptyTiles[index];\n\n      createTile({ position, value: 2 });\n    }\n  }, [findEmptyTiles, createTile]);\n\n  const positionToIndex = (position: [number, number]) => {\n    return position[1] * tileCountPerRowOrColumn + position[0];\n  };\n\n  const indexToPosition = (index: number) => {\n    const x = index % tileCountPerRowOrColumn;\n    const y = Math.floor(index / tileCountPerRowOrColumn);\n    return [x, y];\n  };\n\n  type RetrieveTileIdsPerRowOrColumn = (rowOrColumnIndex: number) => number[];\n\n  type CalculateTileIndex = (\n    tileIndex: number,\n    tileInRowIndex: number,\n    howManyMerges: number,\n    maxIndexInRow: number\n  ) => number;\n\n  const move = (\n    retrieveTileIdsPerRowOrColumn: RetrieveTileIdsPerRowOrColumn,\n    calculateFirstFreeIndex: CalculateTileIndex\n  ) => {\n    // new tiles cannot be created during motion.\n    dispatch({ type: \"START_MOVE\" });\n\n    const maxIndex = tileCountPerRowOrColumn - 1;\n\n    // iterates through every row or column (depends on move kind - vertical or horizontal).\n    for (\n      let rowOrColumnIndex = 0;\n      rowOrColumnIndex < tileCountPerRowOrColumn;\n      rowOrColumnIndex += 1\n    ) {\n      // retrieves tiles in the row or column.\n      const availableTileIds = retrieveTileIdsPerRowOrColumn(rowOrColumnIndex);\n\n      // previousTile is used to determine if tile can be merged with the current tile.\n      let previousTile: TileMeta | undefined;\n      // mergeCount helps to fill gaps created by tile merges - two tiles become one.\n      let mergedTilesCount = 0;\n\n      // interate through available tiles.\n      availableTileIds.forEach((tileId, nonEmptyTileIndex) => {\n        const currentTile = tiles[tileId];\n\n        // if previous tile has the same value as the current one they should be merged together.\n        if (\n          previousTile !== undefined &&\n          previousTile.value === currentTile.value\n        ) {\n          const tile = {\n            ...currentTile,\n            position: previousTile.position,\n            mergeWith: previousTile.id,\n          } as TileMeta;\n\n          // delays the merge by 250ms, so the sliding animation can be completed.\n          throttledMergeTile(tile, previousTile);\n          // previous tile must be cleared as a single tile can be merged only once per move.\n          previousTile = undefined;\n          // increment the merged counter to correct position for the consecutive tiles to get rid of gaps\n          mergedTilesCount += 1;\n\n          return updateTile(tile);\n        }\n\n        // else - previous and current tiles are different - move the tile to the first free space.\n        const tile = {\n          ...currentTile,\n          position: indexToPosition(\n            calculateFirstFreeIndex(\n              rowOrColumnIndex,\n              nonEmptyTileIndex,\n              mergedTilesCount,\n              maxIndex\n            )\n          ),\n        } as TileMeta;\n\n        // previous tile become the current tile to check if the next tile can be merged with this one.\n        previousTile = tile;\n\n        // only if tile has changed its position it will be updated\n        if (didTileMove(currentTile, tile)) {\n          return updateTile(tile);\n        }\n      });\n    }\n\n    // wait until the end of all animations.\n    setTimeout(() => dispatch({ type: \"END_MOVE\" }), animationDuration);\n  };\n\n  const moveLeftFactory = () => {\n    const retrieveTileIdsByRow = (rowIndex: number) => {\n      const tileMap = retrieveTileMap();\n\n      const tileIdsInRow = [\n        tileMap[rowIndex * tileCountPerRowOrColumn + 0],\n        tileMap[rowIndex * tileCountPerRowOrColumn + 1],\n        tileMap[rowIndex * tileCountPerRowOrColumn + 2],\n        tileMap[rowIndex * tileCountPerRowOrColumn + 3],\n      ];\n\n      const nonEmptyTiles = tileIdsInRow.filter((id) => id !== 0);\n      return nonEmptyTiles;\n    };\n\n    const calculateFirstFreeIndex = (\n      tileIndex: number,\n      tileInRowIndex: number,\n      howManyMerges: number,\n      _: number\n    ) => {\n      return (\n        tileIndex * tileCountPerRowOrColumn + tileInRowIndex - howManyMerges\n      );\n    };\n\n    return move.bind(this, retrieveTileIdsByRow, calculateFirstFreeIndex);\n  };\n\n  const moveRightFactory = () => {\n    const retrieveTileIdsByRow = (rowIndex: number) => {\n      const tileMap = retrieveTileMap();\n\n      const tileIdsInRow = [\n        tileMap[rowIndex * tileCountPerRowOrColumn + 0],\n        tileMap[rowIndex * tileCountPerRowOrColumn + 1],\n        tileMap[rowIndex * tileCountPerRowOrColumn + 2],\n        tileMap[rowIndex * tileCountPerRowOrColumn + 3],\n      ];\n\n      const nonEmptyTiles = tileIdsInRow.filter((id) => id !== 0);\n      return nonEmptyTiles.reverse();\n    };\n\n    const calculateFirstFreeIndex = (\n      tileIndex: number,\n      tileInRowIndex: number,\n      howManyMerges: number,\n      maxIndexInRow: number\n    ) => {\n      return (\n        tileIndex * tileCountPerRowOrColumn +\n        maxIndexInRow +\n        howManyMerges -\n        tileInRowIndex\n      );\n    };\n\n    return move.bind(this, retrieveTileIdsByRow, calculateFirstFreeIndex);\n  };\n\n  const moveUpFactory = () => {\n    const retrieveTileIdsByColumn = (columnIndex: number) => {\n      const tileMap = retrieveTileMap();\n\n      const tileIdsInColumn = [\n        tileMap[columnIndex + tileCountPerRowOrColumn * 0],\n        tileMap[columnIndex + tileCountPerRowOrColumn * 1],\n        tileMap[columnIndex + tileCountPerRowOrColumn * 2],\n        tileMap[columnIndex + tileCountPerRowOrColumn * 3],\n      ];\n\n      const nonEmptyTiles = tileIdsInColumn.filter((id) => id !== 0);\n      return nonEmptyTiles;\n    };\n\n    const calculateFirstFreeIndex = (\n      tileIndex: number,\n      tileInColumnIndex: number,\n      howManyMerges: number,\n      _: number\n    ) => {\n      return (\n        tileIndex +\n        tileCountPerRowOrColumn * (tileInColumnIndex - howManyMerges)\n      );\n    };\n\n    return move.bind(this, retrieveTileIdsByColumn, calculateFirstFreeIndex);\n  };\n\n  const moveDownFactory = () => {\n    const retrieveTileIdsByColumn = (columnIndex: number) => {\n      const tileMap = retrieveTileMap();\n\n      const tileIdsInColumn = [\n        tileMap[columnIndex + tileCountPerRowOrColumn * 0],\n        tileMap[columnIndex + tileCountPerRowOrColumn * 1],\n        tileMap[columnIndex + tileCountPerRowOrColumn * 2],\n        tileMap[columnIndex + tileCountPerRowOrColumn * 3],\n      ];\n\n      const nonEmptyTiles = tileIdsInColumn.filter((id) => id !== 0);\n      return nonEmptyTiles.reverse();\n    };\n\n    const calculateFirstFreeIndex = (\n      tileIndex: number,\n      tileInColumnIndex: number,\n      howManyMerges: number,\n      maxIndexInColumn: number\n    ) => {\n      return (\n        tileIndex +\n        tileCountPerRowOrColumn *\n          (maxIndexInColumn - tileInColumnIndex + howManyMerges)\n      );\n    };\n\n    return move.bind(this, retrieveTileIdsByColumn, calculateFirstFreeIndex);\n  };\n\n  useEffect(() => {\n    if (isInitialRender.current) {\n      createTile({ position: [0, 1], value: 2 });\n      createTile({ position: [0, 2], value: 2 });\n      isInitialRender.current = false;\n      return;\n    }\n\n    if (!inMotion && hasChanged) {\n      generateRandomTile();\n    }\n  }, [hasChanged, inMotion, createTile, generateRandomTile]);\n\n  const tileList = byIds.map((tileId) => tiles[tileId]);\n\n  const moveLeft = moveLeftFactory();\n  const moveRight = moveRightFactory();\n  const moveUp = moveUpFactory();\n  const moveDown = moveDownFactory();\n\n  return [tileList, moveLeft, moveRight, moveUp, moveDown] as [\n    TileMeta[],\n    () => void,\n    () => void,\n    () => void,\n    () => void\n  ];\n};\n","import React, { useEffect } from \"react\";\nimport { useThrottledCallback } from \"use-debounce\";\n\nimport { useGame } from \"./hooks/useGame\";\nimport { Board, animationDuration, tileCount } from \"../Board\";\n\nexport const Game = () => {\n  const [tiles, moveLeft, moveRight, moveUp, moveDown] = useGame();\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    // disables page scrolling with keyboard arrows\n    e.preventDefault();\n\n    switch (e.code) {\n      case \"ArrowLeft\":\n        moveLeft();\n        break;\n      case \"ArrowRight\":\n        moveRight();\n        break;\n      case \"ArrowUp\":\n        moveUp();\n        break;\n      case \"ArrowDown\":\n        moveDown();\n        break;\n    }\n  };\n\n  // protects the reducer from being flooded with events.\n  const throttledHandleKeyDown = useThrottledCallback(\n    handleKeyDown,\n    animationDuration,\n    { leading: true, trailing: false }\n  );\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", throttledHandleKeyDown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", throttledHandleKeyDown);\n    };\n  }, [throttledHandleKeyDown]);\n\n  return <Board tiles={tiles} tileCountPerRow={tileCount} />;\n};\n","import React, { useState } from \"react\";\nimport { Button } from \"./components/Button\";\nimport { Game } from \"./components/Game\";\n\nimport \"./App.less\";\n\n/* eslint-disable react/jsx-no-target-blank */\nexport const App = () => {\n  const [date, setDate] = useState<Date>(new Date());\n\n  const handleRestart = () => {\n    setDate(new Date());\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <div>\n          <h1>Play 2048</h1>\n        </div>\n        <div>\n          <Button onClick={handleRestart}>Restart</Button>\n        </div>\n      </div>\n      <Game key={date.toISOString()} />\n      <div>\n        <p>\n          <b>Wondering how was that built?</b> You can find a video tutorial and\n          code here:\n        </p>\n        <ul>\n          <li>\n            <a href=\"https://youtu.be/vI0QArPnkUc\" target=\"_blank\">\n              Tutorial (YouTube video)\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"https://github.com/mateuszsokola/2048-in-react/\"\n              target=\"_blank\"\n            >\n              Source Code (Github)\n            </a>\n          </li>\n          <li>\n            <a\n              href=\"https://mateuszsokola.github.io/2048-animation-examples/\"\n              target=\"_blank\"\n            >\n              Animation Examples (Github Pages)\n            </a>\n          </li>\n        </ul>\n        <p>\n          This game (2048) was built using <b>React</b> and <b>TypeScript</b>.\n          The unique part of this example is animations. The animations in React\n          aren't that straightforward, so I hope you can learn something new\n          from it.\n        </p>\n      </div>\n      <div className=\"footer\">\n        Made with ❤️ by{\" \"}\n        <a\n          href=\"https://www.youtube.com/channel/UCJV16_5c4A0amyBZSI4yP6A\"\n          target=\"_blank\"\n        >\n          Matt Sokola\n        </a>\n      </div>\n    </div>\n  );\n};\n/* eslint-enable react/jsx-no-target-blank */\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}